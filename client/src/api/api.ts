/* tslint:disable */
/* eslint-disable */
/**
 * SF CTF apis
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChangePasswordRequestDto
 */
export interface ChangePasswordRequestDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequestDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequestDto
     */
    'oldPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequestDto
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface CreateChallengeRequestDto
 */
export interface CreateChallengeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateChallengeRequestDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof CreateChallengeRequestDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreateChallengeRequestDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateChallengeRequestDto
     */
    'category': CreateChallengeRequestDtoCategoryEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateChallengeRequestDto
     */
    'fileList': Array<string>;
    /**
     * 
     * @type {CreateChallengeRequestDtoGrading}
     * @memberof CreateChallengeRequestDto
     */
    'grading': CreateChallengeRequestDtoGrading;
    /**
     * 
     * @type {string}
     * @memberof CreateChallengeRequestDto
     */
    'flag': string;
}

export const CreateChallengeRequestDtoCategoryEnum = {
    Web: 'Web',
    Forensic: 'Forensic',
    Pwnable: 'Pwnable',
    Reversing: 'Reversing',
    Misc: 'Misc'
} as const;

export type CreateChallengeRequestDtoCategoryEnum = typeof CreateChallengeRequestDtoCategoryEnum[keyof typeof CreateChallengeRequestDtoCategoryEnum];

/**
 * 
 * @export
 * @interface CreateChallengeRequestDtoGrading
 */
export interface CreateChallengeRequestDtoGrading {
    /**
     * 
     * @type {number}
     * @memberof CreateChallengeRequestDtoGrading
     */
    'minimumScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateChallengeRequestDtoGrading
     */
    'maximumScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateChallengeRequestDtoGrading
     */
    'maximumSolvedUserCount'?: number;
}
/**
 * 
 * @export
 * @interface GetAllChallengesRequestDto
 */
export interface GetAllChallengesRequestDto {
    /**
     * 
     * @type {string}
     * @memberof GetAllChallengesRequestDto
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface GetAllChallengesResponseDto
 */
export interface GetAllChallengesResponseDto {
    /**
     * 
     * @type {Array<GetAllChallengesResponseDtoChallengesInner>}
     * @memberof GetAllChallengesResponseDto
     */
    'challenges': Array<GetAllChallengesResponseDtoChallengesInner>;
}
/**
 * 
 * @export
 * @interface GetAllChallengesResponseDtoChallengesInner
 */
export interface GetAllChallengesResponseDtoChallengesInner {
    /**
     * 
     * @type {string}
     * @memberof GetAllChallengesResponseDtoChallengesInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllChallengesResponseDtoChallengesInner
     */
    'description'?: string;
    /**
     * 
     * @type {Enum}
     * @memberof GetAllChallengesResponseDtoChallengesInner
     */
    'category'?: GetAllChallengesResponseDtoChallengesInnerCategoryEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAllChallengesResponseDtoChallengesInner
     */
    'fileList'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof GetAllChallengesResponseDtoChallengesInner
     */
    'score'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetAllChallengesResponseDtoChallengesInner
     */
    'solved'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetAllChallengesResponseDtoChallengesInner
     */
    'authorUsername'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAllChallengesResponseDtoChallengesInner
     */
    'solverCount'?: number;
}

export const GetAllChallengesResponseDtoChallengesInnerCategoryEnum = {
    Web: 'Web',
    Forensic: 'Forensic',
    Pwnable: 'Pwnable',
    Reversing: 'Reversing',
    Misc: 'Misc'
} as const;

export type GetAllChallengesResponseDtoChallengesInnerCategoryEnum = typeof GetAllChallengesResponseDtoChallengesInnerCategoryEnum[keyof typeof GetAllChallengesResponseDtoChallengesInnerCategoryEnum];

/**
 * 
 * @export
 * @interface GetLogRequestDto
 */
export interface GetLogRequestDto {
    /**
     * 
     * @type {string}
     * @memberof GetLogRequestDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof GetLogRequestDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLogRequestDto
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLogRequestDto
     */
    'ip'?: string;
    /**
     * Zero based page index. 25 logs per page
     * @type {number}
     * @memberof GetLogRequestDto
     */
    'page': number;
}
/**
 * 
 * @export
 * @interface GetLogResponseDto
 */
export interface GetLogResponseDto {
    /**
     * 
     * @type {Array<GetLogResponseDtoLogsInner>}
     * @memberof GetLogResponseDto
     */
    'logs': Array<GetLogResponseDtoLogsInner>;
    /**
     * Total pages for submitted query
     * @type {number}
     * @memberof GetLogResponseDto
     */
    'pages': number;
}
/**
 * 
 * @export
 * @interface GetLogResponseDtoLogsInner
 */
export interface GetLogResponseDtoLogsInner {
    /**
     * 
     * @type {string}
     * @memberof GetLogResponseDtoLogsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLogResponseDtoLogsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLogResponseDtoLogsInner
     */
    'ip'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLogResponseDtoLogsInner
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLogResponseDtoLogsInner
     */
    'nickname'?: string;
    /**
     * 
     * @type {Enum}
     * @memberof GetLogResponseDtoLogsInner
     */
    'type'?: GetLogResponseDtoLogsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GetLogResponseDtoLogsInner
     */
    'filename'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLogResponseDtoLogsInner
     */
    'flag'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetLogResponseDtoLogsInner
     */
    'solved'?: boolean;
}

export const GetLogResponseDtoLogsInnerTypeEnum = {
    Login: 'Login',
    Download: 'Download',
    Submit: 'Submit'
} as const;

export type GetLogResponseDtoLogsInnerTypeEnum = typeof GetLogResponseDtoLogsInnerTypeEnum[keyof typeof GetLogResponseDtoLogsInnerTypeEnum];

/**
 * 
 * @export
 * @interface GetRequestDto
 */
export interface GetRequestDto {
    /**
     * 
     * @type {string}
     * @memberof GetRequestDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof GetRequestDto
     */
    'filename': string;
}
/**
 * 
 * @export
 * @interface GetResponseDto
 */
export interface GetResponseDto {
    /**
     * 
     * @type {string}
     * @memberof GetResponseDto
     */
    'presignedUrl': string;
}
/**
 * 
 * @export
 * @interface GetSolversRequestDto
 */
export interface GetSolversRequestDto {
    /**
     * 
     * @type {string}
     * @memberof GetSolversRequestDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof GetSolversRequestDto
     */
    'challengeTitle': string;
    /**
     * Zero based page index. 10 per page
     * @type {number}
     * @memberof GetSolversRequestDto
     */
    'page': number;
}
/**
 * 
 * @export
 * @interface GetSolversResponseDto
 */
export interface GetSolversResponseDto {
    /**
     * 
     * @type {Array<GetSolversResponseDtoSolversInner>}
     * @memberof GetSolversResponseDto
     */
    'solvers': Array<GetSolversResponseDtoSolversInner>;
    /**
     * Total pages for submitted query
     * @type {number}
     * @memberof GetSolversResponseDto
     */
    'pages': number;
}
/**
 * 
 * @export
 * @interface GetSolversResponseDtoSolversInner
 */
export interface GetSolversResponseDtoSolversInner {
    /**
     * 
     * @type {string}
     * @memberof GetSolversResponseDtoSolversInner
     */
    'solvedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSolversResponseDtoSolversInner
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequestDto
 */
export interface LoginRequestDto {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface PutRequestDto
 */
export interface PutRequestDto {
    /**
     * 
     * @type {string}
     * @memberof PutRequestDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof PutRequestDto
     */
    'filename': string;
}
/**
 * 
 * @export
 * @interface PutResponseDto
 */
export interface PutResponseDto {
    /**
     * 
     * @type {string}
     * @memberof PutResponseDto
     */
    'presignedUrl': string;
}
/**
 * 
 * @export
 * @interface RankingRequestDto
 */
export interface RankingRequestDto {
    /**
     * 
     * @type {string}
     * @memberof RankingRequestDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof RankingRequestDto
     */
    'section'?: RankingRequestDtoSectionEnum;
    /**
     * Zero based page index. 15 users per page
     * @type {number}
     * @memberof RankingRequestDto
     */
    'page': number;
}

export const RankingRequestDtoSectionEnum = {
    Security: 'Security',
    SecurityFirst: 'SecurityFirst',
    Software: 'Software'
} as const;

export type RankingRequestDtoSectionEnum = typeof RankingRequestDtoSectionEnum[keyof typeof RankingRequestDtoSectionEnum];

/**
 * 
 * @export
 * @interface RankingResponseDto
 */
export interface RankingResponseDto {
    /**
     * 
     * @type {Array<RankingResponseDtoUsersInner>}
     * @memberof RankingResponseDto
     */
    'users': Array<RankingResponseDtoUsersInner>;
    /**
     * Total pages for requested query
     * @type {number}
     * @memberof RankingResponseDto
     */
    'pages': number;
}
/**
 * 
 * @export
 * @interface RankingResponseDtoUsersInner
 */
export interface RankingResponseDtoUsersInner {
    /**
     * 
     * @type {number}
     * @memberof RankingResponseDtoUsersInner
     */
    'rank'?: number;
    /**
     * 
     * @type {string}
     * @memberof RankingResponseDtoUsersInner
     */
    'username'?: string;
    /**
     * 
     * @type {number}
     * @memberof RankingResponseDtoUsersInner
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface RegisterRequestDto
 */
export interface RegisterRequestDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'nickname': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'section': RegisterRequestDtoSectionEnum;
}

export const RegisterRequestDtoSectionEnum = {
    Security: 'Security',
    Software: 'Software',
    SecurityFirst: 'SecurityFirst'
} as const;

export type RegisterRequestDtoSectionEnum = typeof RegisterRequestDtoSectionEnum[keyof typeof RegisterRequestDtoSectionEnum];

/**
 * 
 * @export
 * @interface StatusRequestDto
 */
export interface StatusRequestDto {
    /**
     * 
     * @type {string}
     * @memberof StatusRequestDto
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface StatusResponseDto
 */
export interface StatusResponseDto {
    /**
     * 
     * @type {string}
     * @memberof StatusResponseDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof StatusResponseDto
     */
    'nickname': string;
    /**
     * 
     * @type {number}
     * @memberof StatusResponseDto
     */
    'score': number;
    /**
     * 
     * @type {Array<StatusResponseDtoSolvedChallengesInner>}
     * @memberof StatusResponseDto
     */
    'solvedChallenges': Array<StatusResponseDtoSolvedChallengesInner>;
    /**
     * 
     * @type {string}
     * @memberof StatusResponseDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface StatusResponseDtoSolvedChallengesInner
 */
export interface StatusResponseDtoSolvedChallengesInner {
    /**
     * 
     * @type {string}
     * @memberof StatusResponseDtoSolvedChallengesInner
     */
    'title'?: string;
    /**
     * 
     * @type {Enum}
     * @memberof StatusResponseDtoSolvedChallengesInner
     */
    'category'?: StatusResponseDtoSolvedChallengesInnerCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof StatusResponseDtoSolvedChallengesInner
     */
    'solvedAt'?: string;
}

export const StatusResponseDtoSolvedChallengesInnerCategoryEnum = {
    Forensic: 'Forensic',
    Misc: 'Misc',
    Pwnable: 'Pwnable',
    Reversing: 'Reversing',
    Web: 'Web'
} as const;

export type StatusResponseDtoSolvedChallengesInnerCategoryEnum = typeof StatusResponseDtoSolvedChallengesInnerCategoryEnum[keyof typeof StatusResponseDtoSolvedChallengesInnerCategoryEnum];

/**
 * 
 * @export
 * @interface SubmitRequestDto
 */
export interface SubmitRequestDto {
    /**
     * 
     * @type {string}
     * @memberof SubmitRequestDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof SubmitRequestDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof SubmitRequestDto
     */
    'flag': string;
}
/**
 * 
 * @export
 * @interface SubmitResponseDto
 */
export interface SubmitResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof SubmitResponseDto
     */
    'success': boolean;
}

/**
 * ChallengeApi - axios parameter creator
 * @export
 */
export const ChallengeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateChallengeRequestDto} createChallengeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerCreate: async (createChallengeRequestDto: CreateChallengeRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createChallengeRequestDto' is not null or undefined
            assertParamExists('challengeControllerCreate', 'createChallengeRequestDto', createChallengeRequestDto)
            const localVarPath = `/api/challenge/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChallengeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetAllChallengesRequestDto} getAllChallengesRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerGetAll: async (getAllChallengesRequestDto: GetAllChallengesRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getAllChallengesRequestDto' is not null or undefined
            assertParamExists('challengeControllerGetAll', 'getAllChallengesRequestDto', getAllChallengesRequestDto)
            const localVarPath = `/api/challenge/getAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAllChallengesRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubmitRequestDto} submitRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerSubmitFlag: async (submitRequestDto: SubmitRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitRequestDto' is not null or undefined
            assertParamExists('challengeControllerSubmitFlag', 'submitRequestDto', submitRequestDto)
            const localVarPath = `/api/challenge/submitFlag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChallengeApi - functional programming interface
 * @export
 */
export const ChallengeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChallengeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateChallengeRequestDto} createChallengeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengeControllerCreate(createChallengeRequestDto: CreateChallengeRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengeControllerCreate(createChallengeRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetAllChallengesRequestDto} getAllChallengesRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengeControllerGetAll(getAllChallengesRequestDto: GetAllChallengesRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllChallengesResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengeControllerGetAll(getAllChallengesRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SubmitRequestDto} submitRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async challengeControllerSubmitFlag(submitRequestDto: SubmitRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.challengeControllerSubmitFlag(submitRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChallengeApi - factory interface
 * @export
 */
export const ChallengeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChallengeApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateChallengeRequestDto} createChallengeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerCreate(createChallengeRequestDto: CreateChallengeRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.challengeControllerCreate(createChallengeRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetAllChallengesRequestDto} getAllChallengesRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerGetAll(getAllChallengesRequestDto: GetAllChallengesRequestDto, options?: any): AxiosPromise<GetAllChallengesResponseDto> {
            return localVarFp.challengeControllerGetAll(getAllChallengesRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubmitRequestDto} submitRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        challengeControllerSubmitFlag(submitRequestDto: SubmitRequestDto, options?: any): AxiosPromise<SubmitResponseDto> {
            return localVarFp.challengeControllerSubmitFlag(submitRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChallengeApi - object-oriented interface
 * @export
 * @class ChallengeApi
 * @extends {BaseAPI}
 */
export class ChallengeApi extends BaseAPI {
    /**
     * 
     * @param {CreateChallengeRequestDto} createChallengeRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengeControllerCreate(createChallengeRequestDto: CreateChallengeRequestDto, options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengeControllerCreate(createChallengeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetAllChallengesRequestDto} getAllChallengesRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengeControllerGetAll(getAllChallengesRequestDto: GetAllChallengesRequestDto, options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengeControllerGetAll(getAllChallengesRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubmitRequestDto} submitRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChallengeApi
     */
    public challengeControllerSubmitFlag(submitRequestDto: SubmitRequestDto, options?: AxiosRequestConfig) {
        return ChallengeApiFp(this.configuration).challengeControllerSubmitFlag(submitRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GetRequestDto} getRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileControllerGet: async (getRequestDto: GetRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getRequestDto' is not null or undefined
            assertParamExists('fileControllerGet', 'getRequestDto', getRequestDto)
            const localVarPath = `/api/file/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PutRequestDto} putRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileControllerPut: async (putRequestDto: PutRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'putRequestDto' is not null or undefined
            assertParamExists('fileControllerPut', 'putRequestDto', putRequestDto)
            const localVarPath = `/api/file/put`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GetRequestDto} getRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileControllerGet(getRequestDto: GetRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileControllerGet(getRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PutRequestDto} putRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileControllerPut(putRequestDto: PutRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileControllerPut(putRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileApiFp(configuration)
    return {
        /**
         * 
         * @param {GetRequestDto} getRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileControllerGet(getRequestDto: GetRequestDto, options?: any): AxiosPromise<GetResponseDto> {
            return localVarFp.fileControllerGet(getRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PutRequestDto} putRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileControllerPut(putRequestDto: PutRequestDto, options?: any): AxiosPromise<PutResponseDto> {
            return localVarFp.fileControllerPut(putRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @param {GetRequestDto} getRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public fileControllerGet(getRequestDto: GetRequestDto, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).fileControllerGet(getRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PutRequestDto} putRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public fileControllerPut(putRequestDto: PutRequestDto, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).fileControllerPut(putRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogApi - axios parameter creator
 * @export
 */
export const LogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GetLogRequestDto} getLogRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logControllerGet: async (getLogRequestDto: GetLogRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getLogRequestDto' is not null or undefined
            assertParamExists('logControllerGet', 'getLogRequestDto', getLogRequestDto)
            const localVarPath = `/api/log/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getLogRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetSolversRequestDto} getSolversRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logControllerGetSolvers: async (getSolversRequestDto: GetSolversRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getSolversRequestDto' is not null or undefined
            assertParamExists('logControllerGetSolvers', 'getSolversRequestDto', getSolversRequestDto)
            const localVarPath = `/api/log/getSolvers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getSolversRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogApi - functional programming interface
 * @export
 */
export const LogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GetLogRequestDto} getLogRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logControllerGet(getLogRequestDto: GetLogRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLogResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logControllerGet(getLogRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetSolversRequestDto} getSolversRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logControllerGetSolvers(getSolversRequestDto: GetSolversRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSolversResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logControllerGetSolvers(getSolversRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogApi - factory interface
 * @export
 */
export const LogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogApiFp(configuration)
    return {
        /**
         * 
         * @param {GetLogRequestDto} getLogRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logControllerGet(getLogRequestDto: GetLogRequestDto, options?: any): AxiosPromise<GetLogResponseDto> {
            return localVarFp.logControllerGet(getLogRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetSolversRequestDto} getSolversRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logControllerGetSolvers(getSolversRequestDto: GetSolversRequestDto, options?: any): AxiosPromise<GetSolversResponseDto> {
            return localVarFp.logControllerGetSolvers(getSolversRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
export class LogApi extends BaseAPI {
    /**
     * 
     * @param {GetLogRequestDto} getLogRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public logControllerGet(getLogRequestDto: GetLogRequestDto, options?: AxiosRequestConfig) {
        return LogApiFp(this.configuration).logControllerGet(getLogRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetSolversRequestDto} getSolversRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public logControllerGetSolvers(getSolversRequestDto: GetSolversRequestDto, options?: AxiosRequestConfig) {
        return LogApiFp(this.configuration).logControllerGetSolvers(getSolversRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordRequestDto} changePasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerChangePassword: async (changePasswordRequestDto: ChangePasswordRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRequestDto' is not null or undefined
            assertParamExists('usersControllerChangePassword', 'changePasswordRequestDto', changePasswordRequestDto)
            const localVarPath = `/api/user/changePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerLogin: async (loginRequestDto: LoginRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDto' is not null or undefined
            assertParamExists('usersControllerLogin', 'loginRequestDto', loginRequestDto)
            const localVarPath = `/api/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RankingRequestDto} rankingRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRanking: async (rankingRequestDto: RankingRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rankingRequestDto' is not null or undefined
            assertParamExists('usersControllerRanking', 'rankingRequestDto', rankingRequestDto)
            const localVarPath = `/api/user/ranking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rankingRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegister: async (registerRequestDto: RegisterRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequestDto' is not null or undefined
            assertParamExists('usersControllerRegister', 'registerRequestDto', registerRequestDto)
            const localVarPath = `/api/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StatusRequestDto} statusRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerStatus: async (statusRequestDto: StatusRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statusRequestDto' is not null or undefined
            assertParamExists('usersControllerStatus', 'statusRequestDto', statusRequestDto)
            const localVarPath = `/api/user/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(statusRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordRequestDto} changePasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerChangePassword(changePasswordRequestDto: ChangePasswordRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerChangePassword(changePasswordRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerLogin(loginRequestDto: LoginRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerLogin(loginRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RankingRequestDto} rankingRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRanking(rankingRequestDto: RankingRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RankingResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRanking(rankingRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRegister(registerRequestDto: RegisterRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRegister(registerRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {StatusRequestDto} statusRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerStatus(statusRequestDto: StatusRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerStatus(statusRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordRequestDto} changePasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerChangePassword(changePasswordRequestDto: ChangePasswordRequestDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.usersControllerChangePassword(changePasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerLogin(loginRequestDto: LoginRequestDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.usersControllerLogin(loginRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RankingRequestDto} rankingRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRanking(rankingRequestDto: RankingRequestDto, options?: any): AxiosPromise<RankingResponseDto> {
            return localVarFp.usersControllerRanking(rankingRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegister(registerRequestDto: RegisterRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerRegister(registerRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StatusRequestDto} statusRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerStatus(statusRequestDto: StatusRequestDto, options?: any): AxiosPromise<StatusResponseDto> {
            return localVarFp.usersControllerStatus(statusRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {ChangePasswordRequestDto} changePasswordRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersControllerChangePassword(changePasswordRequestDto: ChangePasswordRequestDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersControllerChangePassword(changePasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersControllerFindAll(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginRequestDto} loginRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersControllerLogin(loginRequestDto: LoginRequestDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersControllerLogin(loginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RankingRequestDto} rankingRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersControllerRanking(rankingRequestDto: RankingRequestDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersControllerRanking(rankingRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequestDto} registerRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersControllerRegister(registerRequestDto: RegisterRequestDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersControllerRegister(registerRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StatusRequestDto} statusRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersControllerStatus(statusRequestDto: StatusRequestDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersControllerStatus(statusRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


